#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

int indexglobal = 0;
int indexdescarte = 0;
int newbaraja = 1;

// Definir una estructura para representar una carta
typedef struct {
    char color; // Usamos 'R', 'B', 'G' y 'Y' para los colores
    char symbol; // '0'-'9' para el nombre de las cartas, o 'R', 'S', 'T' o 'W' para cartas especiales
} Card;

// Definir una estructura para representar el estado del juego
typedef struct {
    Card deck[60]; // la baraja de cartas
    Card hands[10][7]; // manos de los jugadores (10 jugadores, 7 cartas cada uno)
    Card discardPile[60]; // la pila de descarte
    int playerCount; // número de jugadores
} GameState;

// Función para inicializar la baraja
void initDeck(GameState* gameState) {
    int index = 0;
    const char colors[] = {'B', 'R', 'G', 'Y'}; // Array de colores permitidos

    // Bucle externo solo para los colores permitidos
    for (int colorIndex = 0; colorIndex < sizeof(colors); colorIndex++) {
        char color = colors[colorIndex];
        for (int i = 0; i < 15; i++) {
            if (i < 10) {
                gameState->deck[index].color = color;
                gameState->deck[index].symbol = '0' + i;
            } else {
                switch (i) {
                    case 10:
                        gameState->deck[index].color = color;
                        gameState->deck[index].symbol = 'R'; // Revertir
                        break;
                    case 11:
                        gameState->deck[index].color = color;
                        gameState->deck[index].symbol = 'S'; // Saltar
                        break;
                    case 12:
                        gameState->deck[index].color = color;
                        gameState->deck[index].symbol = 'T'; // Tomar Dos
                        break;
                    default:
                        if (index % 2 == 0) {
                            gameState->deck[index].color = 'W'; // Cambiar color
                            gameState->deck[index].symbol = '4';
                        } else {
                            gameState->deck[index].color = 'W'; // Cambiar color
                            gameState->deck[index].symbol = 'W';
                        }
                        break;
                }
            }
            index++;
        }
    }
    for (int i = 0; i < 60; i++) {
        gameState->discardPile[i].color = '\0';
        gameState->discardPile[i].symbol = '\0';
    }
    // Barajar la baraja usando el algoritmo de Fisher-Yates
    for (int i = 59; i > 0; i--) {
        int j = rand() % (i + 1);
        Card temp = gameState->deck[i];
        gameState->deck[i] = gameState->deck[j];
        gameState->deck[j] = temp;
    }
}

// Función para imprimir el maso de cartas
void printDeck(GameState* gameState) {
    printf("Deck:\n");
    for (int i = 0; i < 60; i++) {
        printf("%c%c ", gameState->deck[i].color, gameState->deck[i].symbol);
        if ((i + 1) % 15 == 0) {
            printf("\n");
        }
    }
    printf("\n");
}

void printDeckDescatadas(GameState* gameState) {
    printf("Deck descartadas:\n");
    for (int i = 0; i < 60; i++) {
        printf("%c%c ", gameState->discardPile[i].color, gameState->discardPile[i].symbol);
        if ((i + 1) % 15 == 0) {
            printf("\n");
        }
    }
    printf("\n");
}

// Función para inicializar las manos de los jugadores
void initHands(GameState* gameState) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 7; j++) {
            gameState->hands[i][j] = gameState->deck[indexglobal];
            gameState->deck[indexglobal].color = '\0'; // quitar la carta de la baraja
            gameState->deck[indexglobal].symbol = '\0';
            indexglobal++;
        }
    }
}

void printhand(GameState* gameState) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 7; j++) {
            printf("%c%c ", gameState->hands[i][j].color, gameState->hands[i][j].symbol);
        }
        printf(" / ");
    }
    printf("\n");
}

int conditionWin(GameState* gameState) {
    for (int j = 0; j < 2; j++) {
        int conteo = 0;
        for (int i = 0; i < 7; i++) {
            if (gameState->hands[j][i].symbol == '\0' && gameState->hands[j][i].color == '\0') {
                conteo++;
            }
        }
        if (conteo >= 7) {
            return 1;
        }
    }
    return 0;
}

void nextCard(GameState* gameState, Card* drawnCard, int* indexglobal, int* indexdescarte) {
    *drawnCard = gameState->deck[*indexglobal];
    gameState->discardPile[*indexdescarte] = gameState->deck[*indexglobal];
    gameState->deck[*indexglobal].symbol = '\0';
    gameState->deck[*indexglobal].color = '\0'; // quitar la carta de la baraja
    (*indexglobal)++;
    (*indexdescarte)++;
}

void agregarCard(GameState* gameState, int currentPlayer, int opc) {
    if (opc >= 0 && opc < 7) {
        Card newCard = gameState->deck[indexglobal];
        gameState->deck[indexglobal].symbol = '\0';
        gameState->deck[indexglobal].color = '\0'; // quitar la carta de la baraja
        indexglobal++;
        gameState->hands[currentPlayer][opc].color = newCard.color; // add the new card to the player's hand
        gameState->hands[currentPlayer][opc].symbol = newCard.symbol;
        printf("Tu mano: ");
        for (int i = 0; i < 7; i++) {
            printf("%c%c|", gameState->hands[currentPlayer][i].color, gameState->hands[currentPlayer][i].symbol);
        }
        printf("\n");
    } else {
        printf("Opcion invalida\n");
    }
}

void ia(GameState* gameState) {
    Card cartainicio = gameState->discardPile[indexdescarte - 1];
    Card cartausada;
    int ubichand = -1;
    int cartavalida = 0;
    do {
        for (int i = 0; i < 7; i++) {
            if (gameState->hands[1][i].color == cartainicio.color || gameState->hands[1][i].symbol == cartainicio.symbol) {
                cartausada = gameState->hands[1][i];
                ubichand = i;
                cartavalida = 1;
                break;
            }
        }
        if (cartavalida == 0) {
            int CartaDeMazoAleatorea = rand() % 7;
            agregarCard(gameState, 1, CartaDeMazoAleatorea);
        }
    } while (cartavalida == 0);

    gameState->discardPile[indexdescarte].color = cartausada.color;
    gameState->discardPile[indexdescarte].symbol = cartausada.symbol;
    printf("Tu contrincante descartó %c%c\n", cartausada.color, cartausada.symbol);
    gameState->hands[1][ubichand].color = '\0'; // quitar la carta de la mano
    gameState->hands[1][ubichand].symbol = '\0'; // quitar la carta de la mano
    indexdescarte++;
}

void playGame(GameState* gameState) {
    printf("Bienvenido a Uno!\n");
    int currentPlayer = 0; // jugador actual
    while (1) {
        printf("Tu mano: ");
        for (int i = 0; i < 7; i++) {
            printf("%c%c|", gameState->hands[currentPlayer][i].color, gameState->hands[currentPlayer][i].symbol);
        }
        printf("\n");

        Card drawnCard;
        if (newbaraja == 1) {
            do {
                printf("se usa next card desde el inicio\n");
                nextCard(gameState, &drawnCard, &indexglobal, &indexdescarte);
            } while (drawnCard.symbol == 'R' || drawnCard.symbol == 'S' || drawnCard.symbol == 'T' || drawnCard.symbol == 'W' || drawnCard.color == 'W');
            newbaraja = 0;
        } else {
            drawnCard = gameState->discardPile[indexdescarte - 1];
        }

        int cartavalida = 0;
        do {
            printf("Tu turno! La carta descartada es: %c%c\n", drawnCard.color, drawnCard.symbol);
            int cartaJugada = -1;
            printf("¿Qué carta deseas jugar? (0-6, 8 para ver el deck, 9 para ver descartadas): ");
            scanf("%d", &cartaJugada);

            if (cartaJugada >= 0 && cartaJugada < 7) {
                Card playedCard = gameState->hands[currentPlayer][cartaJugada];
                if (playedCard.color == drawnCard.color || playedCard.symbol == drawnCard.symbol) {
                    gameState->discardPile[indexdescarte].color = playedCard.color;
                    gameState->discardPile[indexdescarte].symbol = playedCard.symbol;
                    gameState->hands[currentPlayer][cartaJugada].color = '\0';
                    gameState->hands[currentPlayer][cartaJugada].symbol = '\0';
                    cartavalida = 1;
                    indexdescarte++;
                } else {
                    printf("opcion invalida\n");
                }
            } else if (cartaJugada == 7) {
                int opc;
                printf("Que carta desea descartar? (0-6): ");
                scanf("%d", &opc);
                agregarCard(gameState, 0, opc);
                drawnCard = gameState->discardPile[indexdescarte - 1];
            } else if (cartaJugada == 8) {
                printDeck(gameState);
            } else if (cartaJugada == 9) {
                printDeckDescatadas(gameState);
            } else {
                printf("opcion invalida\n");
            }
        } while (cartavalida != 1);

        printf("La carta descartada ahora es %c%c\n", gameState->discardPile[indexdescarte - 1].color, gameState->discardPile[indexdescarte - 1].symbol);
        printf("Tu contricante va a jugar!\n");
        ia(gameState);

        if (conditionWin(gameState)) {
            printf("GANASTE\n");
            break;
        }
    }
}

int CartaValida(GameState* gameState, Card c1, Card c2) {
    return (c1.color == c2.color || c1.symbol == c2.symbol);
}

int main() {
    srand(time(0)); // semilla Aleatoria
    GameState gameState;
    gameState.playerCount = 2; // 2 jugadores por ahora
    initDeck(&gameState);
    printDeck(&gameState);
    initHands(&gameState);
    printhand(&gameState);
    printDeck(&gameState);
    playGame(&gameState);
    return 0;
}
