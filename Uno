#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

int indexglobal = 0;
int indexdescarte = 0;

// Definir una estructura para representar una carta
typedef struct {
    char color; // Usamos 'R', 'B', 'G' y 'Y' para los colores
    char symbol; // '0'-'9' para el nombre de las cartas, o 'R', 'S', 'T' o 'W' para cartas especiales
} Card;

// Definir una estructura para representar el estado del juego
typedef struct {
    Card deck[66]; // la baraja de cartas
    Card hands[10][7]; // manos de los jugadores (10 jugadores, 7 cartas cada uno)
    Card discardPile[66]; // la pila de descarte
    int playerCount; // número de jugadores
} GameState;

// Función para inicializar la baraja
// Función para inicializar la baraja
void initDeck(GameState* gameState) {
    int index = 0;
    const char colors[] = {'B', 'R', 'G', 'Y'}; // Array de colores permitidos

    // Bucle externo solo para los colores permitidos
    for (int colorIndex = 0; colorIndex < sizeof(colors); colorIndex++) {
        char color = colors[colorIndex];
        for (int i = 0; i < 15; i++) {
                if (i < 10) {
                    gameState->deck[index].color = color;
                    gameState->deck[index].symbol = '0' + i;
                     } else {
                    switch (i) {
                        case 10:
                        gameState->deck[index].color = color;
                        gameState->deck[index].symbol = 'R'; // Revertir
                        break;
                     case 11:
                        gameState->deck[index].color = color;
                        gameState->deck[index].symbol = 'S'; // Saltar
                        break;
                     case 12:
                        gameState->deck[index].color = color;
                        gameState->deck[index].symbol = 'T'; // Tomar Dos
                        break;
                      default:
                        if(index%2==0){
                            gameState->deck[index].color = 'W'; // Cambiar color
                            gameState->deck[index].symbol = '4';
                        }else{
                            gameState->deck[index].color = 'W'; // Cambiar color
                            gameState->deck[index].symbol = 'W';
                        }
                        break;
                    }
                }
                index++;
        }
    }
    // Barajar la baraja usando el algoritmo de Fisher-Yates
    /*for (int i = 59; i > 0; i--) {
        int j = rand() % (i + 1);
        Card temp = gameState->deck[i];
        gameState->deck[i] = gameState->deck[j];
        gameState->deck[j] = temp;
    }*/
}


// Función para imprimir el maso de cartas
void printDeck(GameState* gameState) {
    printf("Deck:\n");
    for (int i = 0; i < 60; i++) {
        if (gameState->deck[i].symbol == 'R' || gameState->deck[i].symbol == 'S' || gameState->deck[i].symbol == 'T' || gameState->deck[i].symbol == 'W') {
            printf("%c%c ", gameState->deck[i].color, gameState->deck[i].symbol);
        } else {
            printf("%c%c ", gameState->deck[i].color, gameState->deck[i].symbol);
        }
        // Salto de línea después de cada 5 cartas
        if ((i + 1) % 15 == 0) {
            printf("\n");
        }
    }
    printf("\n");
}


// Función para inicializar las manos de los jugadores
void initHands(GameState* gameState) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 7; j++) {
            gameState->hands[i][j] = gameState->deck[indexglobal];
            gameState->deck[indexglobal].color = '\0'; // quitar la carta de la baraja
            gameState->deck[indexglobal].symbol = '\0';
            indexglobal++;
        }
    }
}

void printhand(GameState* gameState){
	for (int i = 0; i < 2 ; i++) {
        for (int j = 0; j < 7; j++) {
            printf("%c%c ", gameState->hands[i][j].symbol,gameState->hands[i][j].color);
        }
    }
};

// Función para jugar el juego
void playGame(GameState* gameState) {
    printf("Bienvenido a Uno!\n");
    int currentPlayer = 0; // jugador actual
    while (1) {
        // Mostrar la mano del jugador actual
         printf("Tu mano: ");
        for (int i = 0; i < 7; i++) {
        printf("%c %c ", gameState->hands[currentPlayer][i].color, gameState->hands[currentPlayer][i].symbol);
        }
        printf("\n");
        // Fase de dibujar

        Card drawnCard = gameState->deck[indexglobal];
        gameState->discardPile[indexdescarte]= gameState->deck[indexglobal];
        gameState->deck[indexglobal].symbol = '\0';
        gameState->deck[indexglobal].color = '\0'; // quitar la carta de la baraja
        indexglobal++;
        indexdescarte++;
        // Fase de jugar
        printf("Tu turno! La carta descartada es: %c %c.\n", drawnCard.color, drawnCard.symbol);

         int cartaJugada = -1;

        printf("¿Qué carta deseas jugar? (0-6): ");

        scanf("%d", &cartaJugada);

        // Procesar la carta jugada

        if (cartaJugada >= 0 && cartaJugada < 7) {

            Card playedCard = gameState->hands[currentPlayer][cartaJugada];

            gameState->discardPile[indexdescarte].color = gameState->hands[currentPlayer][cartaJugada].color;
            gameState->discardPile[indexdescarte].symbol = gameState->hands[currentPlayer][cartaJugada].symbol;
            gameState->hands[currentPlayer][cartaJugada].color = '\0'; // quitar la carta de la mano
            gameState->hands[currentPlayer][cartaJugada].symbol = '\0'; // quitar la carta de la mano

        // Fase de descartar
        // Agregar la carta descartada a la pila de descarte
        //gameState->discardPile[0] = drawnCard;

        
        // Verificar condición de victoria
    };
} };

int CartaValida(GameState* gameState,Card c1,Card c2) {

    if(c1.color==c2.color){return 1;};

    if(c1.symbol==c2.symbol){return 1;};

    return 0;

};

int main(){
    srand(time(0)); // semilla Aleatoria
    GameState gameState;
    gameState.playerCount = 2; // 2 jugadores por ahora
    initDeck(&gameState);
    printDeck(&gameState);
    initHands(&gameState);
    printhand(&gameState);
    printDeck(&gameState);
    getchar();
    getchar();
    return 0;
};
